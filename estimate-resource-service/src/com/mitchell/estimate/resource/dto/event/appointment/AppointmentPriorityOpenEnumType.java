//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.1-833 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.11.03 at 12:33:26 PM PST 
//


package com.mitchell.estimate.resource.dto.event.appointment;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for AppointmentPriorityOpenEnumType.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="AppointmentPriorityOpenEnumType">
 *   &lt;restriction base="{http://www.cieca.com/BMS}OpenEnum">
 *     &lt;enumeration value="Elevated Priority"/>
 *     &lt;enumeration value="High Priority"/>
 *     &lt;enumeration value="Must-see Date"/>
 *     &lt;enumeration value="Must-see Time"/>
 *     &lt;enumeration value="Standard Priority"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "AppointmentPriorityOpenEnumType")
@XmlEnum
public enum AppointmentPriorityOpenEnumType {

    @XmlEnumValue("Elevated Priority")
    ELEVATED_PRIORITY("Elevated Priority"),
    @XmlEnumValue("High Priority")
    HIGH_PRIORITY("High Priority"),
    @XmlEnumValue("Must-see Date")
    MUST_SEE_DATE("Must-see Date"),
    @XmlEnumValue("Must-see Time")
    MUST_SEE_TIME("Must-see Time"),
    @XmlEnumValue("Standard Priority")
    STANDARD_PRIORITY("Standard Priority");
    private final String value;

    AppointmentPriorityOpenEnumType(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static AppointmentPriorityOpenEnumType fromValue(String v) {
        for (AppointmentPriorityOpenEnumType c: AppointmentPriorityOpenEnumType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
