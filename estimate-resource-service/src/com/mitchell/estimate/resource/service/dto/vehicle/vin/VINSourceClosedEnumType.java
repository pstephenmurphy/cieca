//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.1-833 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.11.03 at 12:33:26 PM PST 
//


package com.mitchell.estimate.resource.service.dto.vehicle.vin;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for VINSourceClosedEnumType.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="VINSourceClosedEnumType">
 *   &lt;restriction base="{http://www.cieca.com/BMS}ClosedEnum">
 *     &lt;enumeration value="Appraisal"/>
 *     &lt;enumeration value="Inspected"/>
 *     &lt;enumeration value="LossReport"/>
 *     &lt;enumeration value="Policy"/>
 *     &lt;enumeration value="Salvage"/>
 *     &lt;enumeration value="Title"/>
 *     &lt;enumeration value="Unknown"/>
 *     &lt;enumeration value="Verified"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "VINSourceClosedEnumType")
@XmlEnum
public enum VINSourceClosedEnumType {

    @XmlEnumValue("Appraisal")
    APPRAISAL("Appraisal"),
    @XmlEnumValue("Inspected")
    INSPECTED("Inspected"),
    @XmlEnumValue("LossReport")
    LOSS_REPORT("LossReport"),
    @XmlEnumValue("Policy")
    POLICY("Policy"),
    @XmlEnumValue("Salvage")
    SALVAGE("Salvage"),
    @XmlEnumValue("Title")
    TITLE("Title"),
    @XmlEnumValue("Unknown")
    UNKNOWN("Unknown"),
    @XmlEnumValue("Verified")
    VERIFIED("Verified");
    private final String value;

    VINSourceClosedEnumType(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static VINSourceClosedEnumType fromValue(String v) {
        for (VINSourceClosedEnumType c: VINSourceClosedEnumType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
